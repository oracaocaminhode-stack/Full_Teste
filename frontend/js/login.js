/**
 * @file login.js
 * @description Este arquivo JavaScript gerencia a l√≥gica espec√≠fica da p√°gina de login do frontend.
 * Inclui manipula√ß√£o do formul√°rio de login, valida√ß√µes, intera√ß√µes de UI, modais e redirecionamentos.
 * 
 * @author Manus AI
 * @date Oct 01, 2025
 */

// ===================================================================
// 1. ELEMENTOS DO DOM
// ===================================================================

/**
 * Objeto para armazenar refer√™ncias aos elementos do DOM da p√°gina de login.
 * Isso evita a necessidade de buscar os elementos repetidamente no DOM.
 */
let loginElements = {};

/**
 * Inicializa as refer√™ncias aos elementos do DOM.
 * Esta fun√ß√£o deve ser chamada ap√≥s o carregamento completo do DOM.
 */
function initLoginElements() {
    loginElements = {
        // Formul√°rio e campos de entrada.
        form: $("#login-form"),
        emailField: $("#email"),
        passwordField: $("#password"),
        rememberField: $("#remember-me"),
        
        // Bot√µes de a√ß√£o.
        loginBtn: $("#login-btn"),
        googleLoginBtn: $("#google-login-btn"),
        togglePasswordBtn: $("#toggle-password"),
        
        // √Åreas de mensagem para feedback ao usu√°rio.
        messageArea: $("#message-area"),
        messageContent: $("#message-content"),
        
        // Modais (caixas de di√°logo flutuantes).
        forgotPasswordModal: $("#forgot-password-modal"),
        
        // Links de navega√ß√£o.
        forgotPasswordLink: $(".forgot-password"),
        registerLink: $("a[href=\"register.html\"]"),
    };
    
    console.log("üìã Elementos do login inicializados.");
}

// ===================================================================
// 2. VALIDA√á√ïES DO FORMUL√ÅRIO
// ===================================================================

/**
 * Valida o campo de e-mail em tempo real ou no blur.
 * Exibe uma mensagem de erro se o e-mail for inv√°lido ou vazio.
 * @returns {boolean} `true` se o campo for v√°lido, `false` caso contr√°rio.
 */
function validateEmailField() {
    const email = loginElements.emailField.value.trim();
    
    clearFieldError(loginElements.emailField);
    
    if (!email) {
        showFieldError(loginElements.emailField, "Email √© obrigat√≥rio.");
        return false;
    }
    
    if (!isValidEmail(email)) {
        showFieldError(loginElements.emailField, "Email inv√°lido.");
        return false;
    }
    
    return true;
}

/**
 * Valida o campo de senha em tempo real ou no blur.
 * Exibe uma mensagem de erro se a senha for muito curta ou vazia.
 * @returns {boolean} `true` se o campo for v√°lido, `false` caso contr√°rio.
 */
function validatePasswordField() {
    const password = loginElements.passwordField.value;
    
    clearFieldError(loginElements.passwordField);
    
    if (!password) {
        showFieldError(loginElements.passwordField, "Senha √© obrigat√≥ria.");
        return false;
    }
    
    // Reutiliza a fun√ß√£o de valida√ß√£o de senha do `utils.js` para consist√™ncia.
    const passwordValidation = validatePassword(password);
    if (!passwordValidation.isValid) {
        showFieldError(loginElements.passwordField, passwordValidation.errors[0]);
        return false;
    }
    
    return true;
}

/**
 * Valida o formul√°rio de login completo, chamando as valida√ß√µes individuais dos campos.
 * @returns {boolean} `true` se todos os campos forem v√°lidos, `false` caso contr√°rio.
 */
function validateLoginForm() {
    const emailValid = validateEmailField();
    const passwordValid = validatePasswordField();
    
    return emailValid && passwordValid;
}

// ===================================================================
// 3. MANIPULA√á√ÉO DO FORMUL√ÅRIO
// ===================================================================

/**
 * Manipula o evento de submiss√£o do formul√°rio de login.
 * Realiza valida√ß√µes, chama a API de login e gerencia o estado de carregamento do bot√£o.
 * @param {Event} event - O objeto de evento de submiss√£o.
 */
async function handleLoginSubmit(event) {
    event.preventDefault(); // Previne o comportamento padr√£o de recarregar a p√°gina.
    
    console.log("üìù Processando formul√°rio de login...");
    
    // Oculta mensagens de feedback anteriores.
    hideElement(loginElements.messageArea);
    
    // Valida o formul√°rio antes de enviar os dados.
    if (!validateLoginForm()) {
        showGlobalMessage("Por favor, corrija os erros no formul√°rio.", "error", "message-area");
        return;
    }
    
    // Coleta os dados dos campos do formul√°rio.
    const formData = {
        email: loginElements.emailField.value.trim(),
        password: loginElements.passwordField.value,
        remember: loginElements.rememberField.checked,
    };
    
    // Exibe o estado de carregamento no bot√£o de login.
    toggleButtonLoading(loginElements.loginBtn, true);
    
    try {
        // Tenta realizar o login atrav√©s da fun√ß√£o `login` do `auth.js`.
        const result = await login(formData.email, formData.password, formData.remember);
        
        if (result.success) {
            showGlobalMessage("Login realizado com sucesso! Redirecionando...", "success", "message-area");
            
            // Redireciona para o dashboard ap√≥s um pequeno atraso.
            setTimeout(() => {
                redirectToDashboard();
            }, 1500);
            
        } else {
            // Exibe a mensagem de erro retornada pela API ou uma mensagem gen√©rica.
            showGlobalMessage(result.error || "Erro ao fazer login. Tente novamente.", "error", "message-area");
        }
        
    } catch (error) {
        console.error("‚ùå Erro no login:", error);
        showGlobalMessage("Erro inesperado. Tente novamente.", "error", "message-area");
        
    } finally {
        // Remove o estado de carregamento do bot√£o, independentemente do sucesso ou falha.
        toggleButtonLoading(loginElements.loginBtn, false);
    }
}

/**
 * Limpa todos os campos do formul√°rio de login e as mensagens de erro.
 */
function clearLoginForm() {
    loginElements.form.reset(); // Reseta os valores dos campos do formul√°rio.
    
    // Limpa as mensagens de erro de cada campo.
    clearFieldError(loginElements.emailField);
    clearFieldError(loginElements.passwordField);
    
    // Oculta a √°rea de mensagens global.
    hideElement(loginElements.messageArea);
    
    // Coloca o foco no campo de e-mail para facilitar a pr√≥xima entrada.
    loginElements.emailField.focus();
}

// ===================================================================
// 4. INTERA√á√ïES DE UI
// ===================================================================

/**
 * Alterna a visibilidade do campo de senha (texto ou asteriscos).
 * Altera o √≠cone do bot√£o de toggle de acordo.
 */
function togglePasswordVisibility() {
    const passwordField = loginElements.passwordField;
    const toggleBtn = loginElements.togglePasswordBtn;
    
    if (passwordField.type === "password") {
        passwordField.type = "text";
        toggleBtn.textContent = "üôà"; // √çcone de olho fechado.
        toggleBtn.setAttribute("aria-label", "Ocultar senha");
    } else {
        passwordField.type = "password";
        toggleBtn.textContent = "üëÅÔ∏è"; // √çcone de olho aberto.
        toggleBtn.setAttribute("aria-label", "Mostrar senha");
    }
}

/**
 * Preenche o formul√°rio de login com credenciais de exemplo.
 * √ötil para desenvolvimento e testes, ativado por atalho de teclado.
 */
function fillExampleCredentials() {
    // Verifica se o ambiente √© de desenvolvimento para evitar preenchimento em produ√ß√£o.
    if (window.location.hostname === "localhost" || window.location.hostname === "127.0.0.1") {
        loginElements.emailField.value = "admin@exemplo.com";
        loginElements.passwordField.value = "admin123";
        
        showGlobalMessage("Credenciais de exemplo preenchidas!", "info", "message-area");
    }
}

/**
 * Verifica os par√¢metros da URL para exibir mensagens de erro/sucesso ou pr√©-preencher campos.
 * Limpa os par√¢metros da URL ap√≥s o processamento para evitar reexibi√ß√£o.
 */
function checkUrlParameters() {
    const urlParams = new URLSearchParams(window.location.search);
    
    // Verifica se h√° uma mensagem de erro na URL.
    const error = urlParams.get("error");
    if (error) {
        let errorMessage = "Erro na autentica√ß√£o.";
        
        switch (error) {
            case "google_auth_failed":
                errorMessage = "Erro na autentica√ß√£o com Google. Tente novamente.";
                break;
            case "session_expired":
                errorMessage = "Sua sess√£o expirou. Fa√ßa login novamente.";
                break;
            case "access_denied":
                errorMessage = "Acesso negado. Voc√™ precisa estar logado.";
                break;
        }
        
        showGlobalMessage(errorMessage, "error", "message-area");
    }
    
    // Verifica se h√° uma mensagem de sucesso na URL.
    const success = urlParams.get("success");
    if (success) {
        let successMessage = "Opera√ß√£o realizada com sucesso!";
        
        switch (success) {
            case "registered":
                successMessage = "Cadastro realizado com sucesso! Fa√ßa login para continuar.";
                break;
            case "logout":
                successMessage = "Logout realizado com sucesso!";
                break;
        }
        
        showGlobalMessage(successMessage, "success", "message-area");
    }
    
    // Verifica se h√° um e-mail para pr√©-preencher o campo de e-mail.
    const email = urlParams.get("email");
    if (email && isValidEmail(email)) {
        loginElements.emailField.value = email;
        loginElements.passwordField.focus(); // Coloca o foco no campo de senha.
    }
    
    // Limpa os par√¢metros da URL para evitar que a mensagem seja exibida novamente ao recarregar.
    if (error || success || email) {
        const cleanUrl = window.location.pathname;
        window.history.replaceState({}, document.title, cleanUrl);
    }
}

// ===================================================================
// 5. MODAL DE "ESQUECEU SENHA"
// ===================================================================

/**
 * Exibe o modal de "Esqueceu a Senha".
 * Adiciona listeners para fechar o modal com a tecla ESC ou clicando fora.
 */
function showForgotPassword() {
    const modal = loginElements.forgotPasswordModal;
    if (modal) {
        showElement(modal);
        addClass(modal, "visible"); // Adiciona classe para transi√ß√£o CSS.
        
        // Adiciona listener para fechar com a tecla ESC.
        document.addEventListener("keydown", handleForgotPasswordEsc);
        
        // Adiciona listener para fechar clicando fora do conte√∫do do modal.
        modal.addEventListener("click", handleForgotPasswordOutsideClick);
    }
}

/**
 * Oculta o modal de "Esqueceu a Senha".
 * Remove os listeners de evento adicionados para fechar o modal.
 */
function closeForgotPassword() {
    const modal = loginElements.forgotPasswordModal;
    if (modal) {
        removeClass(modal, "visible"); // Remove classe para transi√ß√£o CSS.
        // Aguarda a transi√ß√£o terminar antes de ocultar completamente.
        setTimeout(() => hideElement(modal), 300);
        
        // Remove os listeners de evento para evitar vazamento de mem√≥ria.
        document.removeEventListener("keydown", handleForgotPasswordEsc);
        modal.removeEventListener("click", handleForgotPasswordOutsideClick);
    }
}

/**
 * Manipulador de evento para fechar o modal de "Esqueceu a Senha" com a tecla ESC.
 * @param {KeyboardEvent} event - O objeto de evento de teclado.
 */
function handleForgotPasswordEsc(event) {
    if (event.key === "Escape") {
        closeForgotPassword();
    }
}

/**
 * Manipulador de evento para fechar o modal de "Esqueceu a Senha" clicando fora do conte√∫do.
 * @param {MouseEvent} event - O objeto de evento de mouse.
 */
function handleForgotPasswordOutsideClick(event) {
    // Verifica se o clique foi diretamente no overlay do modal, e n√£o em seu conte√∫do.
    if (event.target === loginElements.forgotPasswordModal) {
        closeForgotPassword();
    }
}

// ===================================================================
// 6. VERIFICA√á√ïES DE ESTADO
// ===================================================================

/**
 * Verifica se o usu√°rio j√° est√° logado ao carregar a p√°gina.
 * Se estiver, redireciona para o dashboard.
 * @returns {Promise<boolean>} `true` se o usu√°rio j√° estiver logado e for redirecionado, `false` caso contr√°rio.
 */
async function checkIfAlreadyLoggedIn() {
    const isAuthenticated = await checkAuthentication();
    
    if (isAuthenticated) {
        console.log("‚úÖ Usu√°rio j√° est√° logado, redirecionando...");
        showGlobalMessage("Voc√™ j√° est√° logado! Redirecionando...", "info", "message-area");
        
        setTimeout(() => {
            redirectToDashboard();
        }, 1000);
        
        return true;
    }
    
    return false;
}

/**
 * Verifica a prefer√™ncia "Lembrar de mim" no armazenamento local.
 * Se ativada, pr√©-preenche o campo de e-mail com os dados do √∫ltimo usu√°rio logado.
 */
function checkRememberMe() {
    const rememberMe = localStorage.getItem("remember_me");
    
    if (rememberMe === "true" && loginElements.rememberField) {
        loginElements.rememberField.checked = true;
        
        // Se havia dados de usu√°rio salvos, tenta pr√©-preencher o e-mail.
        const savedUser = getUserData();
        if (savedUser && savedUser.email) {
            loginElements.emailField.value = savedUser.email;
            loginElements.passwordField.focus(); // Coloca o foco no campo de senha.
        }
    }
}

// ===================================================================
// 7. EVENT LISTENERS
// ===================================================================

/**
 * Adiciona todos os event listeners necess√°rios para a p√°gina de login.
 */
function addLoginEventListeners() {
    // Listener para a submiss√£o do formul√°rio de login.
    if (loginElements.form) {
        loginElements.form.addEventListener("submit", handleLoginSubmit);
    }
    
    // Listeners para valida√ß√£o em tempo real dos campos de e-mail e senha.
    if (loginElements.emailField) {
        loginElements.emailField.addEventListener("input", validateEmailField);
        loginElements.emailField.addEventListener("blur", validateEmailField);
    }
    
    if (loginElements.passwordField) {
        loginElements.passwordField.addEventListener("input", validatePasswordField);
        loginElements.passwordField.addEventListener("blur", validatePasswordField);
    }
    
    // Listener para o bot√£o de alternar visibilidade da senha.
    if (loginElements.togglePasswordBtn) {
        loginElements.togglePasswordBtn.addEventListener("click", togglePasswordVisibility);
    }
    
    // Listener para o bot√£o de login com Google.
    if (loginElements.googleLoginBtn) {
        loginElements.googleLoginBtn.addEventListener("click", loginWithGoogle);
    }

    // Listener para o link "Esqueceu a senha?".
    if (loginElements.forgotPasswordLink) {
        loginElements.forgotPasswordLink.addEventListener("click", (e) => {
            e.preventDefault(); // Previne o comportamento padr√£o do link.
            showForgotPassword();
        });
    }
    
    // Listeners para atalhos de teclado.
    document.addEventListener("keydown", (e) => {
        // Ctrl+Enter para submeter o formul√°rio de login.
        if (e.ctrlKey && e.key === "Enter") {
            e.preventDefault();
            if (loginElements.form) {
                loginElements.form.dispatchEvent(new Event("submit"));
            }
        }
        
        // Ctrl+Shift+E para preencher credenciais de exemplo (apenas em desenvolvimento).
        if (e.ctrlKey && e.shiftKey && e.key === "E") {
            e.preventDefault();
            fillExampleCredentials();
        }
    });
    
    // Auto-foco no primeiro campo vazio ao carregar a p√°gina.
    setTimeout(() => {
        if (loginElements.emailField && !loginElements.emailField.value) {
            loginElements.emailField.focus();
        } else if (loginElements.passwordField && !loginElements.passwordField.value) {
            loginElements.passwordField.focus();
        }
    }, 100);
}

// ===================================================================
// 8. INICIALIZA√á√ÉO
// ===================================================================

/**
 * Fun√ß√£o principal de inicializa√ß√£o da p√°gina de login.
 * Chamada quando o DOM estiver completamente carregado.
 */
async function initLoginPage() {
    console.log("üöÄ Inicializando p√°gina de login...");
    
    // Inicializa as refer√™ncias aos elementos do DOM.
    initLoginElements();
    
    // Adiciona todos os event listeners.
    addLoginEventListeners();
    
    // Verifica se o usu√°rio j√° est√° logado e redireciona, se necess√°rio.
    const loggedIn = await checkIfAlreadyLoggedIn();
    if (loggedIn) return; // Se j√° logado, n√£o continua a inicializa√ß√£o da p√°gina de login.
    
    // Verifica e pr√©-preenche o campo de e-mail se a op√ß√£o "Lembrar de mim" estiver ativa.
    checkRememberMe();
    
    // Processa par√¢metros da URL (mensagens de erro/sucesso, pr√©-preenchimento de e-mail).
    checkUrlParameters();
    
    console.log("‚úÖ P√°gina de login inicializada.");
}

// ===================================================================
// 9. FUN√á√ïES GLOBAIS (PARA USO EM HTML)
// ===================================================================

/**
 * Exp√µe fun√ß√µes para serem acess√≠veis diretamente do HTML (onclick, etc.).
 */
window.showForgotPassword = showForgotPassword;
window.closeForgotPassword = closeForgotPassword;
window.fillExampleCredentials = fillExampleCredentials;

// ===================================================================
// 10. INICIALIZA√á√ÉO AUTOM√ÅTICA
// ===================================================================

// Garante que a fun√ß√£o de inicializa√ß√£o seja chamada quando o DOM estiver pronto.
onDOMContentLoaded(initLoginPage);

