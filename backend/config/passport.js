/**
 * @file config/passport.js
 * @description Configura√ß√£o das estrat√©gias de autentica√ß√£o para o Passport.js.
 * Este arquivo define como o Passport.js ir√° autenticar usu√°rios usando JWT e Google OAuth.
 * 
 * @author Manus AI
 * @date Oct 01, 2025
 */

// ===================================================================
// IMPORTA√á√ïES DE M√ìDULOS
// ===================================================================

// Importa a biblioteca Passport.js
const passport = require("passport");

// Importa a estrat√©gia JWT do Passport para autentica√ß√£o baseada em token
const JwtStrategy = require("passport-jwt").Strategy;
const ExtractJwt = require("passport-jwt").ExtractJwt;

// Importa a estrat√©gia Google OAuth 2.0 do Passport para login social
const GoogleStrategy = require("passport-google-oauth20").Strategy;

// Importa o modelo de usu√°rio (simulado em mem√≥ria para este projeto)
// Em uma aplica√ß√£o real, este seria um modelo de banco de dados (e.g., Mongoose, Sequelize)
const User = require("../models/User");

// ===================================================================
// ESTRAT√âGIA JWT (JSON Web Token)
// ===================================================================

/**
 * @description Configura a estrat√©gia JWT para validar tokens em rotas protegidas.
 * Esta estrat√©gia √© fundamental para um sistema de autentica√ß√£o stateless, onde cada requisi√ß√£o
 * autenticada carrega um token que √© verificado pelo servidor.
 * 
 * @flow
 * 1. O cliente envia um token JWT no cabe√ßalho `Authorization` (formato `Bearer <token>`).
 * 2. `ExtractJwt.fromAuthHeaderAsBearerToken()` extrai este token da requisi√ß√£o.
 * 3. A `JwtStrategy` usa `process.env.JWT_SECRET` para verificar a assinatura do token.
 * 4. Se o token for v√°lido e n√£o expirado, o `payload` (dados do usu√°rio) √© decodificado.
 * 5. A fun√ß√£o `async (payload, done)` √© executada, buscando o usu√°rio no banco de dados
 *    com base no `userId` contido no `payload`.
 * 6. Se o usu√°rio for encontrado, `done(null, user)` √© chamado, indicando sucesso e anexando
 *    o objeto `user` ao `req.user` para uso nas rotas subsequentes.
 * 7. Se o usu√°rio n√£o for encontrado ou o token for inv√°lido/expirado, `done(null, false)` √© chamado.
 */
passport.use(
  new JwtStrategy(
    {
      // Extrai o token JWT do cabe√ßalho de autoriza√ß√£o como um token Bearer
      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),
      // A chave secreta usada para assinar e verificar o JWT. ESSENCIAL para seguran√ßa.
      secretOrKey: process.env.JWT_SECRET,
      // N√£o ignora a expira√ß√£o do token. Tokens expirados ser√£o rejeitados.
      ignoreExpiration: false,
    },
    async (payload, done) => {
      try {
        console.log("üîç Validando token JWT para userId:", payload.userId);
        // Busca o usu√°rio no modelo (simulado) usando o ID do payload do JWT
        const user = await User.findById(payload.userId);

        if (user) {
          console.log("‚úÖ Token JWT v√°lido, usu√°rio encontrado:", user.email);
          // Autentica√ß√£o bem-sucedida: retorna o usu√°rio
          return done(null, user);
        } else {
          console.log("‚ùå Token JWT v√°lido, mas usu√°rio n√£o encontrado no sistema.");
          // Usu√°rio n√£o encontrado (e.g., foi exclu√≠do ap√≥s a emiss√£o do token)
          return done(null, false);
        }
      } catch (error) {
        console.error("‚ùå Erro na estrat√©gia JWT:", error);
        // Em caso de erro inesperado durante a busca do usu√°rio
        return done(error, false);
      }
    }
  )
);

// ===================================================================
// ESTRAT√âGIA GOOGLE OAUTH 2.0
// ===================================================================

/**
 * @description Configura a estrat√©gia Google OAuth 2.0 para permitir login via contas Google.
 * Isso oferece uma forma conveniente para os usu√°rios se autenticarem sem criar uma nova senha.
 * 
 * @flow
 * 1. O usu√°rio clica em "Login com Google" no frontend.
 * 2. O frontend redireciona para o endpoint `/api/auth/google` no backend.
 * 3. O backend, usando `passport.authenticate('google')`, redireciona o usu√°rio para a p√°gina de login do Google.
 * 4. Ap√≥s o usu√°rio autorizar, o Google redireciona de volta para `callbackURL` (`/api/auth/google/callback`).
 * 5. A `GoogleStrategy` √© ativada, recebendo `accessToken`, `refreshToken` e `profile` do Google.
 * 6. A fun√ß√£o `async (accessToken, refreshToken, profile, done)` √© executada.
 * 7. O sistema verifica se j√° existe um usu√°rio com o `googleId` ou `email` fornecido pelo Google.
 * 8. Se o usu√°rio existe, ele √© retornado. Se n√£o, um novo usu√°rio √© criado com os dados do Google.
 * 9. `done(null, user)` √© chamado, autenticando o usu√°rio no sistema.
 */
passport.use(
  new GoogleStrategy(
    {
      // ID do cliente Google, obtido no Google Cloud Console.
      clientID: process.env.GOOGLE_CLIENT_ID,
      // Segredo do cliente Google, obtido no Google Cloud Console. Mantenha-o seguro.
      clientSecret: process.env.GOOGLE_CLIENT_SECRET,
      // URL de redirecionamento ap√≥s a autentica√ß√£o no Google. Deve ser configurada no Google Cloud Console.
      callbackURL: process.env.GOOGLE_CALLBACK_URL || "/api/auth/google/callback",
    },
    async (accessToken, refreshToken, profile, done) => {
      try {
        console.log("üîç Processando login Google para:", profile.emails[0].value);
        
        // Extrai dados relevantes do perfil do Google
        const googleData = {
          googleId: profile.id,
          email: profile.emails[0].value,
          name: profile.displayName,
          picture: profile.photos[0].value,
          emailVerified: profile.emails[0].verified,
        };

        // Tenta encontrar um usu√°rio existente pelo googleId ou email
        let user = await User.findByGoogleId(googleData.googleId);

        if (user) {
          console.log("‚úÖ Login Google bem-sucedido para usu√°rio existente:", user.email);
          // Se o usu√°rio j√° existe, retorna-o.
          return done(null, user);
        } else {
          // Se n√£o encontrou pelo googleId, tenta encontrar pelo email
          user = await User.findByEmail(googleData.email);
          if (user) {
            console.log("üìù Vinculando conta existente (email) ao Google ID.");
            // Se encontrou pelo email, atualiza o googleId para vincular a conta
            user = await User.updateGoogleData(user.id, {
              googleId: googleData.googleId,
              picture: googleData.picture,
              provider: "google",
            });
            return done(null, user);
          } else {
            console.log("üë§ Criando novo usu√°rio via Google OAuth.");
            // Se o usu√°rio n√£o existe, cria um novo com os dados do Google
            const newUser = await User.create({
              email: googleData.email,
              name: googleData.name,
              googleId: googleData.googleId,
              picture: googleData.picture,
              // O email do Google j√° √© considerado verificado
              isEmailVerified: true,
              authProvider: "google",
            });
            console.log("‚úÖ Novo usu√°rio criado via Google OAuth.");
            return done(null, newUser);
          }
        }
      } catch (error) {
        console.error("‚ùå Erro na estrat√©gia Google OAuth:", error);
        return done(error, null);
      }
    }
  )
);

// ===================================================================
// SERIALIZA√á√ÉO E DESSERIALIZA√á√ÉO DO USU√ÅRIO (PARA SESS√ïES)
// ===================================================================

/**
 * @function passport.serializeUser
 * @description Serializa o usu√°rio para armazenar na sess√£o.
 * Em um sistema stateless como o que usa JWT, a sess√£o n√£o √© usada para manter o estado
 * de autentica√ß√£o. No entanto, o Passport.js exige que estas fun√ß√µes sejam definidas.
 * Aqui, apenas armazenamos o ID do usu√°rio na sess√£o.
 * @param {object} user - O objeto de usu√°rio a ser serializado.
 * @param {function} done - Callback para indicar o resultado da serializa√ß√£o.
 */
passport.serializeUser((user, done) => {
  console.log("üì¶ Serializando usu√°rio (apenas ID para sess√£o):");
  done(null, user.id);
});

/**
 * @function passport.deserializeUser
 * @description Desserializa o usu√°rio da sess√£o.
 * Recupera o objeto de usu√°rio completo a partir do ID armazenado na sess√£o.
 * Assim como `serializeUser`, √© mais relevante para autentica√ß√£o baseada em sess√£o.
 * @param {string} id - O ID do usu√°rio armazenado na sess√£o.
 * @param {function} done - Callback para indicar o resultado da desserializa√ß√£o.
 */
passport.deserializeUser(async (id, done) => {
  try {
    console.log("üì¶ Desserializando usu√°rio (buscando pelo ID):");
    const user = await User.findById(id);
    done(null, user);
  } catch (error) {
    console.error("‚ùå Erro ao desserializar usu√°rio:", error);
    done(error, null);
  }
});

// ===================================================================
// MIDDLEWARES DE AUTENTICA√á√ÉO PERSONALIZADOS
// ===================================================================

/**
 * @function authenticateJWT
 * @description Middleware para proteger rotas que exigem autentica√ß√£o JWT.
 * Se o token for v√°lido, `req.user` ser√° populado com os dados do usu√°rio.
 * Se o token for inv√°lido ou ausente, a requisi√ß√£o ser√° respondida com status 401 (Unauthorized).
 * 
 * @param {object} req - Objeto de requisi√ß√£o do Express.
 * @param {object} res - Objeto de resposta do Express.
 * @param {function} next - Fun√ß√£o para passar o controle para o pr√≥ximo middleware.
 */
const authenticateJWT = (req, res, next) => {
  // Usa a estrat√©gia 'jwt' do Passport.js. `session: false` indica que n√£o usaremos sess√µes.
  passport.authenticate("jwt", { session: false }, (err, user, info) => {
    if (err) {
      console.error("‚ùå Erro interno na autentica√ß√£o JWT:", err);
      return res.status(500).json({
        error: "Erro interno de autentica√ß√£o.",
        code: "AUTH_ERROR",
      });
    }

    if (!user) {
      console.log("‚ùå Autentica√ß√£o JWT falhou: Token inv√°lido ou expirado.");
      // Se nenhum usu√°rio for retornado, o token √© inv√°lido ou ausente.
      return res.status(401).json({
        error: "N√£o autorizado: Token inv√°lido ou expirado.",
        code: "INVALID_TOKEN",
      });
    }

    // Se a autentica√ß√£o for bem-sucedida, anexa o usu√°rio ao objeto de requisi√ß√£o
    req.user = user;
    console.log("‚úÖ Usu√°rio autenticado via JWT:", user.email);
    next(); // Passa o controle para o pr√≥ximo middleware/rota
  })(req, res, next); // Chama o middleware de autentica√ß√£o do Passport
};

/**
 * @function optionalAuth
 * @description Middleware que tenta autenticar o usu√°rio via JWT, mas n√£o falha a requisi√ß√£o
 * se a autentica√ß√£o n√£o for bem-sucedida. `req.user` ser√° `null` se n√£o autenticado.
 * √ötil para rotas que podem ser acessadas tanto por usu√°rios autenticados quanto an√¥nimos.
 * 
 * @param {object} req - Objeto de requisi√ß√£o do Express.
 * @param {object} res - Objeto de resposta do Express.
 * @param {function} next - Fun√ß√£o para passar o controle para o pr√≥ximo middleware.
 */
const optionalAuth = (req, res, next) => {
  passport.authenticate("jwt", { session: false }, (err, user, info) => {
    if (err) {
      console.warn("‚ö†Ô∏è Erro na autentica√ß√£o opcional (ignorado):", err);
      // Erros internos s√£o logados, mas n√£o impedem o fluxo da requisi√ß√£o
    }
    // Anexa o usu√°rio ao objeto de requisi√ß√£o se autenticado, caso contr√°rio, √© null
    req.user = user || null;
    console.log("‚ÑπÔ∏è Autentica√ß√£o opcional: Usu√°rio", user ? user.email : "n√£o autenticado");
    next(); // Passa o controle para o pr√≥ximo middleware/rota
  })(req, res, next); // Chama o middleware de autentica√ß√£o do Passport
};

// ===================================================================
// EXPORTA√á√ïES
// ===================================================================

// Exporta a inst√¢ncia do Passport configurada e os middlewares de autentica√ß√£o
module.exports = {
  passport,
  authenticateJWT,
  optionalAuth,
};
