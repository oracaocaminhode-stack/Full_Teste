/**
 * @file routes/auth.js
 * @description Rotas de autentica√ß√£o para o sistema, incluindo registro, login, Google OAuth, perfil e renova√ß√£o de token.
 * Este m√≥dulo gerencia o fluxo de autentica√ß√£o de usu√°rios, garantindo a seguran√ßa e a integridade dos dados.
 * 
 * @author Manus AI
 * @date Oct 01, 2025
 */

// ===================================================================
// IMPORTA√á√ïES DE M√ìDULOS
// ===================================================================

// Importa o m√≥dulo `express` para criar e gerenciar rotas.
const express = require("express");

// Importa `body` e `validationResult` do `express-validator` para valida√ß√£o de dados de entrada.
const { body, validationResult } = require("express-validator");

// Importa `rateLimit` do `express-rate-limit` para prote√ß√£o contra ataques de for√ßa bruta.
const rateLimit = require("express-rate-limit");

// Importa o modelo de usu√°rio (simulado em mem√≥ria).
const User = require("../models/User");

// Importa fun√ß√µes utilit√°rias para JWT (gera√ß√£o e valida√ß√£o de tokens).
const { generateTokenPair, validateToken } = require("../utils/jwt");

// Importa os middlewares de autentica√ß√£o do Passport.js.
const { authenticateJWT } = require("../config/passport");
const passport = require("passport");

// Cria uma nova inst√¢ncia de roteador Express.
const router = express.Router();

// ===================================================================
// RATE LIMITING ESPEC√çFICO PARA AUTENTICA√á√ÉO
// ===================================================================

/**
 * @constant authLimiter
 * @description Middleware de rate limiting para rotas de autentica√ß√£o.
 * Ajuda a prevenir ataques de for√ßa bruta e abuso de endpoints de login/registro.
 * Limita o n√∫mero de requisi√ß√µes por IP em um determinado per√≠odo.
 */
const authLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutos
  max: 5, // Limite de 5 requisi√ß√µes por IP a cada 15 minutos
  message: {
    error: "Muitas tentativas de autentica√ß√£o. Tente novamente em 15 minutos.",
    code: "AUTH_RATE_LIMIT_EXCEEDED",
  },
  standardHeaders: true, // Retorna informa√ß√µes de rate limit nos cabe√ßalhos (RateLimit-Limit, RateLimit-Remaining, RateLimit-Reset)
  legacyHeaders: false, // Desabilita os cabe√ßalhos X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset
  // A fun√ß√£o `skip` permite ignorar o rate limit para certas rotas.
  // Neste caso, rotas de perfil e logout n√£o s√£o afetadas.
  skip: (req) => {
    return req.path === "/profile" || req.path === "/logout";
  },
});

// Aplica o middleware de rate limiting a todas as rotas definidas neste roteador.
router.use(authLimiter);

// ===================================================================
// VALIDADORES DE ENTRADA
// ===================================================================

/**
 * @constant registerValidators
 * @description Array de middlewares de valida√ß√£o para a rota de registro.
 * Garante que os dados fornecidos pelo usu√°rio atendam aos requisitos de formato e seguran√ßa.
 */
const registerValidators = [
  body("email")
    .isEmail()
    .normalizeEmail()
    .withMessage("Email deve ter um formato v√°lido."),

  body("password")
    .isLength({ min: 6 })
    .withMessage("Senha deve ter pelo menos 6 caracteres.")
    .matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/)
    .withMessage(
      "Senha deve conter pelo menos: 1 letra min√∫scula, 1 mai√∫scula e 1 n√∫mero."
    ),

  body("name")
    .trim()
    .isLength({ min: 2, max: 100 })
    .withMessage("Nome deve ter entre 2 e 100 caracteres.")
    .matches(/^[a-zA-Z√Ä-√ø\s]+$/)
    .withMessage("Nome deve conter apenas letras e espa√ßos."),
];

/**
 * @constant loginValidators
 * @description Array de middlewares de valida√ß√£o para a rota de login.
 * Garante que os campos essenciais (email e senha) n√£o estejam vazios e tenham formato v√°lido.
 */
const loginValidators = [
  body("email")
    .isEmail()
    .normalizeEmail()
    .withMessage("Email deve ter um formato v√°lido."),

  body("password").notEmpty().withMessage("Senha √© obrigat√≥ria."),
];

// ===================================================================
// ROTA: CADASTRO DE USU√ÅRIO
// ===================================================================

/**
 * @route POST /api/auth/register
 * @description Endpoint para registrar um novo usu√°rio com e-mail e senha.
 * Valida os dados de entrada, verifica a exist√™ncia do e-mail e cria um novo usu√°rio.
 * Em caso de sucesso, retorna os dados do usu√°rio e tokens de autentica√ß√£o.
 * 
 * @param {string} req.body.email - O e-mail do novo usu√°rio.
 * @param {string} req.body.password - A senha do novo usu√°rio.
 * @param {string} req.body.name - O nome do novo usu√°rio.
 * @returns {object} 201 - Usu√°rio criado com sucesso e tokens JWT.
 * @returns {object} 400 - Erros de valida√ß√£o de entrada.
 * @returns {object} 409 - E-mail j√° registrado.
 * @returns {object} 500 - Erro interno do servidor.
 */
router.post("/register", registerValidators, async (req, res) => {
  try {
    console.log("üìù Tentativa de cadastro para:", req.body.email);

    // Verifica se h√° erros de valida√ß√£o dos dados de entrada.
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      console.log("‚ùå Dados de cadastro inv√°lidos:", errors.array());
      return res.status(400).json({
        error: "Dados inv√°lidos.",
        code: "VALIDATION_ERROR",
        details: errors.array(),
      });
    }

    const { email, password, name } = req.body;

    // Verifica se j√° existe um usu√°rio com o e-mail fornecido.
    const existingUser = await User.findByEmail(email);
    if (existingUser) {
      console.log("‚ùå Tentativa de cadastro com e-mail existente:", email);
      return res.status(409).json({
        error: "E-mail j√° est√° em uso.",
        code: "EMAIL_ALREADY_EXISTS",
      });
    }

    // Cria um novo usu√°rio no sistema.
    const newUser = await User.create({
      email,
      password,
      name,
      authProvider: "local",
      isEmailVerified: false, // Em uma aplica√ß√£o real, um processo de verifica√ß√£o de e-mail seria iniciado aqui.
    });

    // Gera um par de tokens (acesso e refresh) para o novo usu√°rio.
    const tokens = generateTokenPair(newUser);

    console.log("‚úÖ Usu√°rio cadastrado com sucesso:", newUser.id);

    // Retorna os dados do usu√°rio (sem a senha) e os tokens.
    res.status(201).json({
      message: "Usu√°rio cadastrado com sucesso.",
      user: newUser.toJSON(),
      ...tokens,
    });
  } catch (error) {
    console.error("‚ùå Erro no cadastro:", error);
    res.status(500).json({
      error: "Erro interno do servidor.",
      code: "INTERNAL_ERROR",
    });
  }
});

// ===================================================================
// ROTA: LOGIN DE USU√ÅRIO
// ===================================================================

/**
 * @route POST /api/auth/login
 * @description Endpoint para autenticar um usu√°rio com e-mail e senha.
 * Valida as credenciais e, se corretas, retorna os dados do usu√°rio e tokens de autentica√ß√£o.
 * 
 * @param {string} req.body.email - O e-mail do usu√°rio.
 * @param {string} req.body.password - A senha do usu√°rio.
 * @returns {object} 200 - Login bem-sucedido e tokens JWT.
 * @returns {object} 400 - Erros de valida√ß√£o de entrada.
 * @returns {object} 401 - Credenciais incorretas ou conta OAuth.
 * @returns {object} 500 - Erro interno do servidor.
 */
router.post("/login", loginValidators, async (req, res) => {
  try {
    console.log("üîê Tentativa de login para:", req.body.email);

    // Verifica se h√° erros de valida√ß√£o dos dados de entrada.
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      console.log("‚ùå Dados de login inv√°lidos:", errors.array());
      return res.status(400).json({
        error: "Dados inv√°lidos.",
        code: "VALIDATION_ERROR",
        details: errors.array(),
      });
    }

    const { email, password } = req.body;

    // Busca o usu√°rio pelo e-mail fornecido.
    const user = await User.findByEmail(email);
    if (!user) {
      console.log("‚ùå Tentativa de login com e-mail inexistente:", email);
      return res.status(401).json({
        error: "Email ou senha incorretos.",
        code: "INVALID_CREDENTIALS",
      });
    }

    // Verifica se a conta foi criada via OAuth (n√£o possui senha local).
    if (!user.password) {
      console.log("‚ùå Tentativa de login com senha em conta OAuth:", email);
      return res.status(401).json({
        error: "Esta conta foi criada com Google. Use \"Entrar com Google\".",
        code: "OAUTH_ACCOUNT",
      });
    }

    // Valida a senha fornecida com a senha hashed armazenada.
    const isPasswordValid = await User.comparePassword(password, user.password);
    if (!isPasswordValid) {
      console.log("‚ùå Senha incorreta para:", email);
      return res.status(401).json({
        error: "Email ou senha incorretos.",
        code: "INVALID_CREDENTIALS",
      });
    }

    // Gera um par de tokens (acesso e refresh) para o usu√°rio autenticado.
    const tokens = generateTokenPair(user);

    console.log("‚úÖ Login bem-sucedido para:", user.email);

    // Retorna os dados do usu√°rio (sem a senha) e os tokens.
    res.json({
      message: "Login realizado com sucesso.",
      user: user.toJSON(),
      ...tokens,
    });
  } catch (error) {
    console.error("‚ùå Erro no login:", error);
    res.status(500).json({
      error: "Erro interno do servidor.",
      code: "INTERNAL_ERROR",
    });
  }
});

// ===================================================================
// ROTA: INICIAR LOGIN COM GOOGLE
// ===================================================================

/**
 * @route GET /api/auth/google
 * @description Inicia o fluxo de autentica√ß√£o com o Google OAuth.
 * Redireciona o usu√°rio para a p√°gina de consentimento do Google.
 * 
 * @flow
 * 1. O usu√°rio √© redirecionado para o Google para autentica√ß√£o.
 * 2. Ap√≥s a autoriza√ß√£o do usu√°rio, o Google redireciona para `/api/auth/google/callback`.
 * 
 * @param {array} scope - Define as permiss√µes solicitadas ao Google (e.g., `profile`, `email`).
 * @param {boolean} session - `false` para indicar que n√£o usaremos sess√µes baseadas em cookies (usamos JWT).
 */
router.get(
  "/google",
  passport.authenticate("google", {
    scope: ["profile", "email"],
    session: false, // N√£o usar sess√µes, pois estamos usando autentica√ß√£o baseada em token (JWT)
  })
);

// ===================================================================
// ROTA: CALLBACK DO GOOGLE OAUTH
// ===================================================================

/**
 * @route GET /api/auth/google/callback
 * @description Endpoint de callback para o Google OAuth.
 * O Google redireciona para esta rota ap√≥s o usu√°rio autorizar a aplica√ß√£o.
 * Processa a resposta do Google, autentica o usu√°rio e gera tokens JWT.
 * 
 * @flow
 * 1. O Google redireciona para esta URL com um c√≥digo de autoriza√ß√£o.
 * 2. O Passport.js troca este c√≥digo por um token de acesso do Google e dados do perfil.
 * 3. A estrat√©gia `GoogleStrategy` (definida em `config/passport.js`) √© executada para criar ou encontrar o usu√°rio.
 * 4. Se bem-sucedido, gera tokens JWT e redireciona para o frontend (ou retorna JSON).
 * 
 * @param {boolean} session - `false` para n√£o usar sess√µes.
 * @param {string} failureRedirect - URL para redirecionar em caso de falha na autentica√ß√£o Google.
 * @returns {object} 200 - Login com Google bem-sucedido e tokens JWT.
 * @returns {object} 500 - Erro interno do servidor durante o processo de callback.
 */
router.get(
  "/google/callback",
  passport.authenticate("google", {
    session: false,
    failureRedirect: "/login?error=google_auth_failed", // Redireciona para o login com erro em caso de falha
  }),
  async (req, res) => {
    try {
      console.log("‚úÖ Callback do Google OAuth bem-sucedido para:", req.user.email);

      // O objeto `req.user` √© populado pelo Passport.js com os dados do usu√°rio autenticado.
      const tokens = generateTokenPair(req.user);

      // Em um cen√°rio de produ√ß√£o, voc√™ geralmente redirecionaria o usu√°rio para o frontend
      // com os tokens na URL ou em cookies seguros.
      // Exemplo: res.redirect(`${process.env.FRONTEND_URL}/dashboard?accessToken=${tokens.accessToken}&refreshToken=${tokens.refreshToken}`);
      
      // Para fins did√°ticos, retornamos os tokens e o usu√°rio como JSON.
      res.json({
        message: "Login com Google realizado com sucesso.",
        user: req.user.toJSON(),
        ...tokens,
      });
    } catch (error) {
      console.error("‚ùå Erro no callback do Google:", error);
      res.status(500).json({
        error: "Erro no login com Google.",
        code: "GOOGLE_AUTH_ERROR",
      });
    }
  }
);

// ===================================================================
// ROTA: PERFIL DO USU√ÅRIO (PROTEGIDA)
// ===================================================================

/**
 * @route GET /api/auth/profile
 * @description Endpoint protegido que retorna os dados do perfil do usu√°rio autenticado.
 * Requer um token JWT v√°lido no cabe√ßalho `Authorization`.
 * 
 * @param {string} req.headers.authorization - Token JWT no formato `Bearer <token>`.
 * @returns {object} 200 - Dados do perfil do usu√°rio.
 * @returns {object} 401 - Token inv√°lido ou expirado (n√£o autorizado).
 * @returns {object} 500 - Erro interno do servidor.
 */
router.get("/profile", authenticateJWT, async (req, res) => {
  try {
    console.log("üë§ Solicita√ß√£o de perfil para usu√°rio:", req.user.email);

    // O objeto `req.user` √© populado pelo middleware `authenticateJWT` (Passport.js)
    // com os dados do usu√°rio autenticado, tornando-o diretamente acess√≠vel aqui.
    res.json({
      message: "Perfil obtido com sucesso.",
      user: req.user.toJSON(), // Retorna o objeto do usu√°rio sem a senha
    });
  } catch (error) {
    console.error("‚ùå Erro ao obter perfil:", error);
    res.status(500).json({
      error: "Erro interno do servidor.",
      code: "INTERNAL_ERROR",
    });
  }
});

// ===================================================================
// ROTA: RENOVAR TOKEN
// ===================================================================

/**
 * @route POST /api/auth/refresh
 * @description Endpoint para renovar o token de acesso usando um refresh token v√°lido.
 * Permite que os usu√°rios mantenham a sess√£o ativa sem precisar fazer login novamente.
 * 
 * @param {string} req.body.refreshToken - O refresh token fornecido pelo cliente.
 * @returns {object} 200 - Novo token de acesso e refresh token.
 * @returns {object} 400 - Refresh token ausente.
 * @returns {object} 401 - Refresh token inv√°lido, expirado ou tipo incorreto.
 * @returns {object} 500 - Erro interno do servidor.
 */
router.post("/refresh", async (req, res) => {
  try {
    console.log("üîÑ Tentativa de renova√ß√£o de token.");

    const { refreshToken } = req.body;

    if (!refreshToken) {
      return res.status(400).json({
        error: "Refresh token √© obrigat√≥rio.",
        code: "MISSING_REFRESH_TOKEN",
      });
    }

    // Valida o refresh token. Se for inv√°lido ou expirado, `validateToken` lan√ßar√° um erro.
    const decoded = validateToken(refreshToken);

    // Verifica se o token decodificado √© realmente um refresh token.
    if (decoded.type !== "refresh") {
      return res.status(401).json({
        error: "Token inv√°lido: N√£o √© um refresh token.",
        code: "INVALID_TOKEN_TYPE",
      });
    }

    // Busca o usu√°rio associado ao refresh token.
    const user = await User.findById(decoded.userId);
    if (!user) {
      return res.status(401).json({
        error: "Usu√°rio n√£o encontrado para o refresh token.",
        code: "USER_NOT_FOUND",
      });
    }

    // Gera um novo par de tokens (acesso e refresh).
    const tokens = generateTokenPair(user);

    console.log("‚úÖ Token renovado com sucesso para:", user.email);

    // Retorna os novos tokens.
    res.json({
      message: "Token renovado com sucesso.",
      ...tokens,
    });
  } catch (error) {
    console.error("‚ùå Erro ao renovar token:", error);

    // Trata erros espec√≠ficos de JWT para dar feedback mais preciso ao cliente.
    if (error.message.includes("Token")) {
      return res.status(401).json({
        error: "Refresh token inv√°lido ou expirado.",
        code: "INVALID_REFRESH_TOKEN",
      });
    }

    res.status(500).json({
      error: "Erro interno do servidor.",
      code: "INTERNAL_ERROR",
    });
  }
});

// ===================================================================
// ROTA: LOGOUT
// ===================================================================

/**
 * @route POST /api/auth/logout
 * @description Endpoint para realizar o logout do usu√°rio.
 * Em um sistema baseado em JWT, o "logout" √© principalmente uma a√ß√£o do lado do cliente
 * (remover os tokens armazenados). Esta rota pode ser usada para invalida√ß√£o de tokens
 * no lado do servidor (e.g., adicionando tokens a uma blacklist ou invalidando refresh tokens).
 * 
 * @param {string} req.headers.authorization - Token JWT no formato `Bearer <token>`.
 * @returns {object} 200 - Mensagem de logout bem-sucedido.
 * @returns {object} 500 - Erro interno do servidor.
 */
router.post("/logout", authenticateJWT, async (req, res) => {
  try {
    console.log("üëã Logout para usu√°rio:", req.user.email);

    // Em uma implementa√ß√£o mais robusta, aqui voc√™ poderia:
    // 1. Adicionar o token de acesso atual a uma blacklist para invalid√°-lo imediatamente.
    // 2. Invalidar o refresh token associado no banco de dados (se estiver armazenado).
    // 3. Registrar o evento de logout para fins de auditoria.

    res.json({
      message: "Logout realizado com sucesso.",
    });
  } catch (error) {
    console.error("‚ùå Erro no logout:", error);
    res.status(500).json({
      error: "Erro interno do servidor.",
      code: "INTERNAL_ERROR",
    });
  }
});

// ===================================================================
// ROTA: VERIFICAR STATUS DE AUTENTICA√á√ÉO
// ===================================================================

/**
 * @route GET /api/auth/status
 * @description Endpoint para verificar o status de autentica√ß√£o do usu√°rio.
 * Pode ser usado pelo frontend para verificar se o usu√°rio ainda est√° logado.
 * 
 * @param {string} [req.headers.authorization] - Token JWT opcional no formato `Bearer <token>`.
 * @returns {object} 200 - Objeto indicando se o usu√°rio est√° autenticado e, se sim, seus dados.
 */
router.get("/status", (req, res) => {
  const authHeader = req.headers.authorization;

  if (!authHeader || !authHeader.startsWith("Bearer ")) {
    // Se n√£o h√° token ou o formato √© inv√°lido, o usu√°rio n√£o est√° autenticado.
    return res.json({
      authenticated: false,
      message: "Token n√£o fornecido ou formato inv√°lido.",
    });
  }

  const token = authHeader.substring(7);

  try {
    // Tenta validar o token. Se for v√°lido, o usu√°rio est√° autenticado.
    const decoded = validateToken(token);
    // Em um cen√°rio real, voc√™ buscaria o usu√°rio no banco de dados para garantir que ele ainda existe.
    // Para este exemplo, apenas a valida√ß√£o do token √© suficiente para o status.
    res.json({
      authenticated: true,
      message: "Usu√°rio autenticado.",
      userId: decoded.userId,
      email: decoded.email,
    });
  } catch (error) {
    // Se o token for inv√°lido ou expirado, o usu√°rio n√£o est√° autenticado.
    res.json({
      authenticated: false,
      message: `Token inv√°lido ou expirado: ${error.message}`,
    });
  }
});

// ===================================================================
// EXPORTA√á√ÉO DO ROUTER
// ===================================================================

module.exports = router;
