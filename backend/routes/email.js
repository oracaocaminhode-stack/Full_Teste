/**
 * @file routes/email.js
 * @description Rotas para o servi√ßo de envio de e-mails.
 * Este m√≥dulo simula o envio de e-mails, que em uma aplica√ß√£o real seria feito
 * atrav√©s de um servi√ßo como Nodemailer, SendGrid, Mailgun, etc.
 * 
 * @author Manus AI
 * @date Oct 01, 2025
 */

// ===================================================================
// IMPORTA√á√ïES DE M√ìDULOS
// ===================================================================

// Importa o m√≥dulo `express` para criar e gerenciar rotas.
const express = require("express");

// Importa `nodemailer` para configurar e enviar e-mails.
const nodemailer = require("nodemailer");

// Importa `body` e `validationResult` do `express-validator` para valida√ß√£o de dados de entrada.
const { body, validationResult } = require("express-validator");

// Importa `rateLimit` do `express-rate-limit` para prote√ß√£o contra spam.
const rateLimit = require("express-rate-limit");

// Importa os middlewares de autentica√ß√£o JWT (opcional e obrigat√≥rio).
const { authenticateJWT, optionalAuth } = require("../config/passport");

// Cria uma nova inst√¢ncia de roteador Express.
const router = express.Router();

// ===================================================================
// RATE LIMITING PARA EMAILS
// ===================================================================

/**
 * @constant emailLimiter
 * @description Middleware de rate limiting para rotas de envio de e-mails.
 * Ajuda a prevenir spam e abuso do servi√ßo de e-mail, limitando o n√∫mero de envios por IP.
 */
const emailLimiter = rateLimit({
  windowMs: 60 * 60 * 1000, // 1 hora
  max: 10, // Limite de 10 e-mails por IP por hora
  message: {
    error: "Muitos e-mails enviados. Tente novamente em 1 hora.",
    code: "EMAIL_RATE_LIMIT_EXCEEDED",
  },
  standardHeaders: true, // Retorna informa√ß√µes de rate limit nos cabe√ßalhos
  legacyHeaders: false, // Desabilita cabe√ßalhos legados
});

// Aplica o middleware de rate limiting a todas as rotas definidas neste roteador.
router.use(emailLimiter);

// ===================================================================
// CONFIGURA√á√ÉO DO NODEMAILER
// ===================================================================

/**
 * @function createEmailTransporter
 * @description Cria e configura um objeto `transporter` do Nodemailer.
 * Este transporter √© respons√°vel por enviar e-mails usando as credenciais SMTP configuradas.
 * 
 * @returns {object} Um objeto `transporter` configurado para envio de e-mails.
 * @throws {Error} Se as vari√°veis de ambiente `EMAIL_USER` ou `EMAIL_PASS` n√£o estiverem configuradas.
 * 
 * @note Para usar o Gmail, √© necess√°rio ativar a autentica√ß√£o de 2 fatores e gerar uma "senha de aplicativo".
 *       A senha de aplicativo deve ser usada como `EMAIL_PASS`, n√£o a senha normal da conta.
 *       Mais informa√ß√µes: https://support.google.com/accounts/answer/185833
 */
function createEmailTransporter() {
  try {
    console.log("üìß Configurando transporter de e-mail...");

    // Verifica se as credenciais de e-mail est√£o configuradas nas vari√°veis de ambiente.
    if (!process.env.EMAIL_USER || !process.env.EMAIL_PASS) {
      throw new Error("Vari√°veis de ambiente EMAIL_USER ou EMAIL_PASS n√£o configuradas.");
    }

    // Cria o transporter com as configura√ß√µes SMTP.
    const transporter = nodemailer.createTransport({
      host: process.env.EMAIL_HOST || "smtp.gmail.com", // Host SMTP (padr√£o Gmail)
      port: parseInt(process.env.EMAIL_PORT) || 587, // Porta SMTP (587 para TLS, 465 para SSL)
      secure: false, // `true` para porta 465 (SSL), `false` para outras (TLS)

      // Credenciais de autentica√ß√£o SMTP.
      auth: {
        user: process.env.EMAIL_USER, // Seu endere√ßo de e-mail (e.g., Gmail)
        pass: process.env.EMAIL_PASS, // Sua senha de aplicativo (para Gmail) ou senha normal.
      },

      // Configura√ß√µes adicionais para TLS. `rejectUnauthorized: false` √© √∫til em desenvolvimento
      // para ignorar certificados autoassinados, mas deve ser `true` em produ√ß√£o.
      tls: {
        rejectUnauthorized: false,
      },
    });

    console.log("‚úÖ Transporter de e-mail configurado.");
    return transporter;
  } catch (error) {
    console.error("‚ùå Erro ao configurar transporter de e-mail:", error);
    throw error;
  }
}

/**
 * @function verifyEmailConnection
 * @description Verifica a conex√£o com o servidor SMTP configurado.
 * √ötil para diagnosticar problemas de configura√ß√£o de e-mail na inicializa√ß√£o ou em testes.
 * 
 * @returns {Promise<boolean>} `true` se a conex√£o for bem-sucedida, `false` caso contr√°rio.
 */
async function verifyEmailConnection() {
  try {
    const transporter = createEmailTransporter();
    await transporter.verify(); // Tenta verificar a conex√£o com o servidor SMTP.
    console.log("‚úÖ Conex√£o com servidor de e-mail verificada com sucesso.");
    return true;
  } catch (error) {
    console.error("‚ùå Erro na conex√£o com servidor de e-mail:", error);
    return false;
  }
}

// ===================================================================
// VALIDADORES DE ENTRADA
// ===================================================================

/**
 * @constant sendEmailValidators
 * @description Array de middlewares de valida√ß√£o para a rota de envio de e-mail simples.
 * Garante que os campos `to`, `subject` e `message` estejam presentes e formatados corretamente.
 */
const sendEmailValidators = [
  body("to")
    .optional()
    .isEmail()
    .normalizeEmail()
    .withMessage("Email de destino deve ter formato v√°lido."),

  body("subject")
    .trim()
    .isLength({ min: 1, max: 200 })
    .withMessage("Assunto deve ter entre 1 e 200 caracteres."),

  body("message")
    .trim()
    .isLength({ min: 1, max: 5000 })
    .withMessage("Mensagem deve ter entre 1 e 5000 caracteres."),

  body("senderName")
    .optional()
    .trim()
    .isLength({ max: 100 })
    .withMessage("Nome do remetente deve ter no m√°ximo 100 caracteres."),

  body("senderEmail")
    .optional()
    .isEmail()
    .normalizeEmail()
    .withMessage("Email do remetente deve ter formato v√°lido."),
];

/**
 * @constant contactValidators
 * @description Array de middlewares de valida√ß√£o para a rota de formul√°rio de contato.
 * Garante que os campos `name`, `email`, `subject` e `message` estejam presentes e formatados corretamente.
 */
const contactValidators = [
  body("name")
    .trim()
    .isLength({ min: 2, max: 100 })
    .withMessage("Nome deve ter entre 2 e 100 caracteres.")
    .matches(/^[a-zA-Z√Ä-√ø\s]+$/)
    .withMessage("Nome deve conter apenas letras e espa√ßos."),

  body("email")
    .isEmail()
    .normalizeEmail()
    .withMessage("Email deve ter formato v√°lido."),

  body("subject")
    .trim()
    .isLength({ min: 5, max: 200 })
    .withMessage("Assunto deve ter entre 5 e 200 caracteres."),

  body("message")
    .trim()
    .isLength({ min: 10, max: 5000 })
    .withMessage("Mensagem deve ter entre 10 e 5000 caracteres."),

  body("phone")
    .optional()
    .trim()
    .matches(/^[\d\s\-\(\)\+]+$/)
    .withMessage("Telefone deve conter apenas n√∫meros e s√≠mbolos v√°lidos."),
];

// ===================================================================
// ROTA: ENVIAR EMAIL SIMPLES
// ===================================================================

/**
 * @route POST /api/email/send
 * @description Endpoint para enviar um e-mail simples.
 * Esta rota pode ser acessada por usu√°rios autenticados ou n√£o (usando `optionalAuth`).
 * O e-mail √© enviado usando o transporter Nodemailer configurado.
 * 
 * @param {string} [req.body.to] - O endere√ßo de e-mail do destinat√°rio. Se n√£o fornecido, usa `process.env.EMAIL_TO`.
 * @param {string} req.body.subject - O assunto do e-mail.
 * @param {string} req.body.message - O corpo da mensagem do e-mail (texto puro).
 * @param {string} [req.body.senderName] - O nome do remetente. Se n√£o fornecido, usa o nome do usu√°rio logado ou "Sistema".
 * @param {string} [req.body.senderEmail] - O e-mail do remetente. Se n√£o fornecido, usa o e-mail do usu√°rio logado ou `process.env.EMAIL_USER`.
 * @returns {object} 200 - Mensagem de sucesso e detalhes do e-mail enviado.
 * @returns {object} 400 - Erros de valida√ß√£o ou e-mail de destino n√£o configurado.
 * @returns {object} 500 - Erro interno do servidor durante o envio do e-mail.
 */
router.post("/send", optionalAuth, sendEmailValidators, async (req, res) => {
  try {
    console.log("üìß Tentativa de envio de e-mail.");

    // Verifica se h√° erros de valida√ß√£o dos dados de entrada.
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      console.log("‚ùå Dados de e-mail inv√°lidos:", errors.array());
      return res.status(400).json({
        error: "Dados inv√°lidos para envio de e-mail.",
        code: "VALIDATION_ERROR",
        details: errors.array(),
      });
    }

    const { to, subject, message, senderName, senderEmail } = req.body;

    // Define o e-mail do destinat√°rio, priorizando o fornecido na requisi√ß√£o ou a vari√°vel de ambiente.
    const recipientEmail = to || process.env.EMAIL_TO;

    if (!recipientEmail) {
      return res.status(400).json({
        error: "Email de destino n√£o configurado. Forne√ßa 'to' ou configure EMAIL_TO no .env.",
        code: "NO_RECIPIENT_EMAIL",
      });
    }

    // Cria o transporter de e-mail.
    const transporter = createEmailTransporter();

    // Define o nome e e-mail do remetente, usando dados do usu√°rio logado se dispon√≠vel.
    const fromName = senderName || req.user?.name || "Sistema";
    const fromEmail = senderEmail || req.user?.email || process.env.EMAIL_USER;

    // Configura as op√ß√µes do e-mail a ser enviado.
    const mailOptions = {
      from: `"${fromName}" <${process.env.EMAIL_USER}>`, // O remetente real (EMAIL_USER) √© usado para autentica√ß√£o SMTP.
      to: recipientEmail,
      subject: subject,
      text: message, // Vers√£o em texto puro do e-mail.
      html: `
                <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                    <h2 style="color: #333;">Nova Mensagem</h2>
                    <div style="background: #f5f5f5; padding: 20px; border-radius: 5px; margin: 20px 0;">
                        <p><strong>De:</strong> ${fromName} (${fromEmail})</p>
                        <p><strong>Assunto:</strong> ${subject}</p>
                        <p><strong>Data:</strong> ${new Date().toLocaleString("pt-BR")}</p>
                    </div>
                    <div style="background: white; padding: 20px; border: 1px solid #ddd; border-radius: 5px;">
                        <h3>Mensagem:</h3>
                        <p style="white-space: pre-wrap; line-height: 1.6;">${message}</p>
                    </div>
                    <div style="margin-top: 20px; padding: 10px; background: #f0f0f0; border-radius: 5px; font-size: 12px; color: #666;">
                        <p>Esta mensagem foi enviada atrav√©s do sistema de contato do site.</p>
                        ${req.user ? `<p>Usu√°rio autenticado: ${req.user.email}</p>` : "<p>Usu√°rio n√£o autenticado</p>"}
                    </div>
                </div>
            `, // Vers√£o em HTML do e-mail.

      // Cabe√ßalhos adicionais para rastreamento ou informa√ß√µes.
      headers: {
        "X-Sender-IP": req.ip,
        "X-User-Agent": req.get("User-Agent"),
      },
    };

    // Se um e-mail de remetente diferente for fornecido, adiciona-o como `Reply-To`.
    if (senderEmail && senderEmail !== process.env.EMAIL_USER) {
      mailOptions.replyTo = `"${fromName}" <${senderEmail}>`;
    }

    console.log("üì§ Enviando e-mail para:", recipientEmail);

    // Envia o e-mail usando o transporter.
    const info = await transporter.sendMail(mailOptions);

    console.log("‚úÖ E-mail enviado com sucesso. Message ID:", info.messageId);

    // Retorna uma resposta de sucesso.
    res.json({
      message: "E-mail enviado com sucesso.",
      messageId: info.messageId,
      recipient: recipientEmail,
      subject: subject,
    });
  } catch (error) {
    console.error("‚ùå Erro ao enviar e-mail:", error);

    // Trata diferentes tipos de erros de e-mail para feedback mais espec√≠fico.
    if (error.code === "EAUTH") {
      return res.status(500).json({
        error: "Erro de autentica√ß√£o do e-mail. Verifique as credenciais SMTP.",
        code: "EMAIL_AUTH_ERROR",
      });
    } else if (error.code === "ECONNECTION") {
      return res.status(500).json({
        error: "Erro de conex√£o com o servidor de e-mail. Verifique a rede ou as configura√ß√µes do host/porta.",
        code: "EMAIL_CONNECTION_ERROR",
      });
    } else {
      return res.status(500).json({
        error: "Erro interno ao enviar e-mail.",
        code: "EMAIL_SEND_ERROR",
      });
    }
  }
});

// ===================================================================
// ROTA: FORMUL√ÅRIO DE CONTATO
// ===================================================================

/**
 * @route POST /api/email/contact
 * @description Endpoint para processar envios de formul√°rios de contato do site.
 * Valida os dados do formul√°rio e envia um e-mail para o administrador (definido em `EMAIL_TO`).
 * 
 * @param {string} req.body.name - O nome do remetente do formul√°rio.
 * @param {string} req.body.email - O e-mail do remetente do formul√°rio.
 * @param {string} req.body.subject - O assunto da mensagem do formul√°rio.
 * @param {string} req.body.message - O corpo da mensagem do formul√°rio.
 * @param {string} [req.body.phone] - O n√∫mero de telefone do remetente (opcional).
 * @returns {object} 200 - Mensagem de sucesso e detalhes do e-mail enviado.
 * @returns {object} 400 - Erros de valida√ß√£o de entrada.
 * @returns {object} 500 - Erro interno do servidor durante o envio do e-mail.
 */
router.post("/contact", contactValidators, async (req, res) => {
  try {
    console.log("üìû Novo formul√°rio de contato de:", req.body.email);

    // Verifica se h√° erros de valida√ß√£o dos dados de entrada.
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      console.log("‚ùå Dados de contato inv√°lidos:", errors.array());
      return res.status(400).json({
        error: "Dados inv√°lidos para o formul√°rio de contato.",
        code: "VALIDATION_ERROR",
        details: errors.array(),
      });
    }

    const { name, email, subject, message, phone } = req.body;

    // Cria o transporter de e-mail.
    const transporter = createEmailTransporter();

    // O e-mail de destino para mensagens de contato (geralmente o administrador).
    const recipientEmail = process.env.EMAIL_TO;

    if (!recipientEmail) {
      return res.status(500).json({
        error: "Email de destino para contato (EMAIL_TO) n√£o configurado no .env.",
        code: "NO_RECIPIENT_EMAIL_CONFIGURED",
      });
    }

    // Configura as op√ß√µes do e-mail para o formul√°rio de contato.
    const mailOptions = {
      from: `"Sistema de Contato" <${process.env.EMAIL_USER}>`, // Remetente do sistema.
      to: recipientEmail, // Destinat√°rio √© o administrador.
      replyTo: `"${name}" <${email}>`, // Permite responder diretamente ao remetente do formul√°rio.
      subject: `[CONTATO] ${subject}`, // Assunto com prefixo para f√°cil identifica√ß√£o.
      text: `
Nome: ${name}
Email: ${email}
${phone ? `Telefone: ${phone}` : ""}
Assunto: ${subject}

Mensagem:
${message}

---
Enviado em: ${new Date().toLocaleString("pt-BR")}
IP: ${req.ip}
            `, // Vers√£o em texto puro.
      html: `
                <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                    <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; border-radius: 10px 10px 0 0;">
                        <h1 style="margin: 0; font-size: 24px;">üìû Nova Mensagem de Contato</h1>
                    </div>
                    
                    <div style="background: white; padding: 30px; border: 1px solid #ddd; border-top: none;">
                        <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
                            <h2 style="color: #333; margin-top: 0;">Informa√ß√µes do Contato</h2>
                            <table style="width: 100%; border-collapse: collapse;">
                                <tr>
                                    <td style="padding: 8px 0; font-weight: bold; color: #555;">Nome:</td>
                                    <td style="padding: 8px 0;">${name}</td>
                                </tr>
                                <tr>
                                    <td style="padding: 8px 0; font-weight: bold; color: #555;">Email:</td>
                                    <td style="padding: 8px 0;"><a href="mailto:${email}" style="color: #667eea;">${email}</a></td>
                                </tr>
                                ${phone ? `
                                <tr>
                                    <td style="padding: 8px 0; font-weight: bold; color: #555;">Telefone:</td>
                                    <td style="padding: 8px 0;">${phone}</td>
                                </tr>
                                ` : ""}
                                <tr>
                                    <td style="padding: 8px 0; font-weight: bold; color: #555;">Assunto:</td>
                                    <td style="padding: 8px 0;">${subject}</td>
                                </tr>
                                <tr>
                                    <td style="padding: 8px 0; font-weight: bold; color: #555;">Data:</td>
                                    <td style="padding: 8px 0;">${new Date().toLocaleString("pt-BR")}</td>
                                </tr>
                            </table>
                        </div>
                        
                        <div style="background: #fff; padding: 20px; border: 2px solid #e9ecef; border-radius: 8px;">
                            <h3 style="color: #333; margin-top: 0;">Mensagem:</h3>
                            <p style="white-space: pre-wrap; line-height: 1.6; color: #555; font-size: 16px;">${message}</p>
                        </div>
                        
                        <div style="margin-top: 20px; padding: 15px; background: #f8f9fa; border-radius: 8px; border-left: 4px solid #667eea;">
                            <p style="margin: 0; font-size: 14px; color: #666;">
                                <strong>üí° Dica:</strong> Voc√™ pode responder diretamente a este e-mail para entrar em contato com ${name}.
                            </p>
                        </div>
                    </div>
                    
                    <div style="text-align: center; margin-top: 30px; padding: 20px; font-size: 12px; color: #999;">
                        <p>&copy; ${new Date().getFullYear()} Seu Projeto. Todos os direitos reservados.</p>
                        <p>Esta mensagem foi enviada automaticamente pelo sistema de contato.</p>
                    </div>
                </div>
            `, // Vers√£o em HTML.
    };

    console.log("üì§ Enviando e-mail de contato para:", recipientEmail);

    // Envia o e-mail usando o transporter.
    const info = await transporter.sendMail(mailOptions);

    console.log("‚úÖ E-mail de contato enviado com sucesso. Message ID:", info.messageId);

    // Retorna uma resposta de sucesso.
    res.json({
      message: "Mensagem de contato enviada com sucesso.",
      messageId: info.messageId,
    });
  } catch (error) {
    console.error("‚ùå Erro ao processar formul√°rio de contato:", error);

    // Trata erros de e-mail de forma semelhante √† rota `/send`.
    if (error.code === "EAUTH") {
      return res.status(500).json({
        error: "Erro de autentica√ß√£o do e-mail. Verifique as credenciais SMTP.",
        code: "EMAIL_AUTH_ERROR",
      });
    } else if (error.code === "ECONNECTION") {
      return res.status(500).json({
        error: "Erro de conex√£o com o servidor de e-mail. Verifique a rede ou as configura√ß√µes do host/porta.",
        code: "EMAIL_CONNECTION_ERROR",
      });
    } else {
      return res.status(500).json({
        error: "Erro interno ao enviar e-mail de contato.",
        code: "EMAIL_SEND_ERROR",
      });
    }
  }
});

// ===================================================================
// EXPORTA√á√ÉO DO ROUTER
// ===================================================================

module.exports = router;
